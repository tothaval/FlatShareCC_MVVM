<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:c_views="clr-namespace:SharedLivingCostCalculator.Components"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <SolidColorBrush x:Key="SCB_Background" Color="White"/>
    <SolidColorBrush x:Key="SCB_ButtonBackground" Color="White"/>

    <SolidColorBrush x:Key="SCB_Text" Color="#444"/>
    <SolidColorBrush x:Key="SCB_Text_Header" Color="DimGray"/>
    <SolidColorBrush x:Key="SCB_Selection" Color="#AEF"/>

    <Geometry x:Key="LockOpenData" x:Shared="False">
        M240-640h360v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85h-80q0-83 58.5-141.5T480-920q83 0 141.5 58.5T680-720v80h40q33 0 56.5 23.5T800-560v400q0 33-23.5 56.5T720-80H240q-33 0-56.5-23.5T160-160v-400q0-33 23.5-56.5T240-640Zm0 480h480v-400H240v400Zm240-120q33 0 56.5-23.5T560-360q0-33-23.5-56.5T480-440q-33 0-56.5 23.5T400-360q0 33 23.5 56.5T480-280ZM240-160v-400 400Z
    </Geometry>

    <Geometry x:Key="LockClosedData" x:Shared="False">
        M240-80q-33 0-56.5-23.5T160-160v-400q0-33 23.5-56.5T240-640h40v-80q0-83 58.5-141.5T480-920q83 0 141.5 58.5T680-720v80h40q33 0 56.5 23.5T800-560v400q0 33-23.5 56.5T720-80H240Zm0-80h480v-400H240v400Zm240-120q33 0 56.5-23.5T560-360q0-33-23.5-56.5T480-440q-33 0-56.5 23.5T400-360q0 33 23.5 56.5T480-280ZM360-640h240v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85v80ZM240-160v-400 400Z
    </Geometry>

    <Thickness x:Key="VisibilityFieldBorderPadding">5</Thickness>

    <CornerRadius x:Key="VisibilityField_CornerRadius">5</CornerRadius>
    <CornerRadius x:Key="Button_CornerRadius">15</CornerRadius>

    <FontFamily x:Key="FF">Verdana</FontFamily>
    <sys:Double x:Key="FS">11</sys:Double>
    <sys:Double x:Key="HFS">14</sys:Double>


    <Style TargetType="Border" x:Key="VisibilityFieldBorder">
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="{DynamicResource VisibilityField_CornerRadius}"/>
        <Setter Property="Padding" Value="{DynamicResource VisibilityFieldBorderPadding}"/>
        <Setter Property="Margin" Value="0 0 0 0"/>
    </Style>


    <!-- Button styles -->
    <!--#region Button styles -->
    <Style TargetType="Button" x:Key="buttonStyle">

        <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="IsHitTestVisible" Value="True"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                BorderThickness="2"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="{DynamicResource Button_CornerRadius}"
                            Padding="20 2">
                        <Grid Background="Transparent">
                            <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                                  Margin="0"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Left"
                                                  />
                        </Grid>
                    </Border>


                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_ButtonBackground}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Opacity" Value="0.47"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToggleButton" x:Key="toggleButtonStyle">

        <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text_Header}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text_Header}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="2"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{DynamicResource Button_CornerRadius}"
                            Padding="20 2">
                        <Grid Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}}"                                              
                                              Margin="0"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Left"
                                              Grid.Column="1"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text_Header}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_ButtonBackground}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text_Header}"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text_Header}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_ButtonBackground}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text_Header}"/>

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Text_Header}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text_Header}"/>
                            <Setter Property="Opacity" Value="0.47"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToggleButton" x:Key="LockDataToggleButtonStyle" x:Shared="False">

        <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Width" Value="47"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="Content">
            <Setter.Value>
                <Path x:Name="LockIcon"
                      Data="{DynamicResource LockOpenData}"
                      Fill="{DynamicResource SCB_ButtonBackground}"
                      Stroke="{DynamicResource SCB_Text}"
                      StrokeThickness="0.49"
                      Stretch="Fill"
                      Width="35"
                      Height="28"/>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        CornerRadius="{DynamicResource Button_CornerRadius}"
                        Padding="2">

                        <ContentPresenter Content="{TemplateBinding Content}"/>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_ButtonBackground}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="BorderThickness" Value="2"/>

                            <Setter Property="Content">
                                <Setter.Value>
                                    <Border Background="{TemplateBinding Background}"
                                            BorderThickness="{TemplateBinding BorderThickness}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            CornerRadius="{DynamicResource Button_CornerRadius}"
                                            Padding="2">
                                        <Path x:Name="LockClosedIcon"
                                              Data="{DynamicResource LockClosedData}"
                                              Fill="{DynamicResource SCB_ButtonBackground}"
                                              Stroke="{DynamicResource SCB_Text}"
                                              StrokeThickness="0.38"
                                              Stretch="Fill"
                                              Width="35"
                                              Height="28"/>
                                    </Border>

                                </Setter.Value>

                            </Setter>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_ButtonBackground}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>

                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="PopupButtonStyle">

        <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="IsHitTestVisible" Value="True"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Margin" Value="10 0"/>
        <Setter Property="Content" Value="?"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="1"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{DynamicResource Button_CornerRadius}">
                        <Grid Background="Transparent">
                            <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                                  Margin="0"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Center"
                                                  />
                        </Grid>
                    </Border>


                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_ButtonBackground}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Opacity" Value="0.47"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--#endregion-->


    <Style TargetType="Calendar" x:Key="CalendarStyle">

        <Setter Property="Background" Value="{DynamicResource SCB_Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}" />
        <Setter Property="BorderThickness" Value="2"/>

    </Style>


    <!-- CheckBox styles -->
    <!--#region CheckBox styles -->
    <Style x:Key="MenuCheckBox" TargetType="CheckBox">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <ContentPresenter Grid.Column="1" 
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    Margin="{TemplateBinding Padding}" 
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                    RecognizesAccessKey="True"/>

                    <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Background" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Background}"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>

    <Style x:Key="OptionCheckBox" TargetType="CheckBox">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Margin" Value="0 5"/>
        <Setter Property="Width" Value="Auto"/>
    </Style>
    <!--#endregion-->


    <!-- combobox style: https://stackoverflow.com/questions/16392670/custom-combobox-in-wpf-application-->
    <!--#region ComboBox -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                  x:Name="Border" 
                  Grid.ColumnSpan="2"
                  CornerRadius="0"
                  Background="{DynamicResource SCB_Text}"
                  BorderBrush="{DynamicResource SCB_Text}"
                  BorderThickness="1" />
            <Border 
                  Grid.Column="0"
                  CornerRadius="0" 
                  Margin="1" 
                  Background="{DynamicResource SCB_Background}"
                  BorderBrush="{DynamicResource SCB_Text}"
                  BorderThickness="0,0,1,0" />
            <Path 
                  x:Name="Arrow"
                  Grid.Column="1"     
                  Fill="{DynamicResource SCB_Background}"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"
                />
        </Grid>
        <!--<ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#808080" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#E0E0E0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="#EEEEEE" />
                <Setter TargetName="Border" Property="BorderBrush" Value="#AAAAAA" />
                <Setter Property="Foreground" Value="#888888"/>
                <Setter TargetName="Arrow" Property="Fill" Value="#888888" />
            </Trigger>
        </ControlTemplate.Triggers>-->
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton 
                            Name="ToggleButton" 
                            Template="{StaticResource ComboBoxToggleButton}" 
                            Grid.Column="2" 
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="3,3,23,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Left" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Style="{x:Null}" 
                            Template="{StaticResource ComboBoxTextBox}" 
                            HorizontalAlignment="Left" 
                            VerticalAlignment="Center" 
                            Margin="3,3,23,3"
                            Focusable="True" 
                            Background="{DynamicResource SCB_Background}"
                            Foreground="{DynamicResource SCB_Text}"
                            Visibility="Hidden"
                            IsReadOnly="{TemplateBinding IsReadOnly}"/>
                        <Popup 
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True" 
                            Focusable="False"
                            PopupAnimation="Slide">

                            <Grid Name="DropDown"
                              SnapsToDevicePixels="True"                
                              MinWidth="{TemplateBinding ActualWidth}"
                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                x:Name="DropDownBorder"
                                Background="{DynamicResource SCB_Background}"

                                BorderThickness="1"
                                BorderBrush="{DynamicResource SCB_Text}"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable"  Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <!-- SimpleStyles: ComboBoxItem -->
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Padding="2"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource SCB_Selection}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->


    <!-- Components styles -->
    <!--#region Components styles -->
    <Style TargetType="c_views:CurrencyInputView">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="c_views:DoubleInputView">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="c_views:ObjectInputView">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>
    <!--#endregion-->


    <!-- DatePicker styles -->
    <!--#region DatePicker -->
    <Style TargetType="DatePicker">

        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}" />
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>

        <Setter Property="FontWeight" Value="Normal"/>

        <!--<Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DatePicker}">
                    <Grid x:Name="PART_Root" Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <DatePickerTextBox x:Name="PART_TextBox"
                                       BorderBrush="{TemplateBinding BorderBrush}"
                                       BorderThickness="{TemplateBinding BorderThickness}"
                                       HorizontalContentAlignment="Stretch"
                                       Padding="{TemplateBinding Padding}"
                                       VerticalContentAlignment="Center"
                                       Visibility="Visible"
                                       Grid.Column="0">
                        </DatePickerTextBox>
                        <Button x:Name="PART_Button" Grid.Column="1">
                            <Button.Content>
                                <TextBlock Text="?" Padding="2 0"/>
                            </Button.Content>
                            <Button.Style>
                                <Style TargetType="{x:Type Button}">

                                    <Setter Property="Background" Value="{DynamicResource SCB_Background}"/>
                                    <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
                                    <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
                                    <Setter Property="FontSize" Value="{DynamicResource FS}"/>
                                    <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                    <Setter Property="SnapsToDevicePixels" Value="True" />

                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Button}">
                                                <Border Background="{TemplateBinding Background}"
                              BorderThickness="2"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              CornerRadius="{DynamicResource Button_CornerRadius}"
                              Padding="5">
                                                    <Grid Background="Transparent">
                                                        <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                                Margin="0"
                                                VerticalAlignment="Center"
                                                HorizontalAlignment="Left"
                                                />
                                                    </Grid>
                                                </Border>


                                                <ControlTemplate.Triggers>

                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                                                        <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                                                    </Trigger>

                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter Property="Background" Value="{DynamicResource SCB_Background}"/>
                                                        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
                                                    </Trigger>

                                                    <Trigger Property="IsEnabled" Value="False">
                                                        <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                                                        <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                                                        <Setter Property="Opacity" Value="0.7"/>
                                                    </Trigger>

                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>

                                    -->

        <!--<Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Button}">

                                                <TextBlock Text="blabla dummi dum kram"/>

                                                <Button x:Name="PART_PreviousButton"
                                                        Grid.Column="0" Focusable="False" HorizontalAlignment="Left" Height="20" Grid.Row="0" Template="{StaticResource PreviousButtonTemplate}" Width="28"/>
                                                <Button x:Name="PART_HeaderButton" Grid.Column="1" FontWeight="Bold" Focusable="False" FontSize="10.5" HorizontalAlignment="Center" Grid.Row="0" Template="{StaticResource HeaderButtonTemplate}"  VerticalAlignment="Center"/>
                                                <Button x:Name="PART_NextButton" Grid.Column="2" Focusable="False" HorizontalAlignment="Right" Height="20" Grid.Row="0" Template="{StaticResource NextButtonTemplate}" Width="28"/>

                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>-->
        <!--
                                </Style>
                            </Button.Style>
                        </Button>
                        <Popup x:Name="PART_Popup" StaysOpen="False" AllowsTransparency="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>-->

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                <Setter Property="Opacity" Value="0.7"/>

            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="DatePickerTextBox">
        <Setter Property="Background" Value="{DynamicResource SCB_Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>

        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="FontWeight" Value="Normal"/>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Opacity" Value="0.4"/>

            </Trigger>


        </Style.Triggers>

    </Style>
    <!--#endregion-->


    <Style TargetType="Grid">
        <Setter Property="Background" Value="Transparent"/>
    </Style>


    <!-- ListView styles -->
    <!--#region ListView styles -->
    <Style x:Key="GridViewColumnHeaderGripper"
   TargetType="Thumb">
        <Setter Property="Width"
      Value="18" />
        <!--<Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0"
                       EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStopCollection>
                            -->
        <!--<GradientStop Color="{DynamicResource BorderLightColor}"
                      Offset="0.0" />
                        <GradientStop Color="{DynamicResource BorderDarkColor}"
                      Offset="1.0" />-->
        <!--
                            <GradientStop Color="Red"
                      Offset="0.0" />
                            <GradientStop Color="Blue"
                      Offset="1.0" />
                        </GradientStopCollection>
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}"
            Background="Transparent">
                        <Rectangle HorizontalAlignment="Center"
                 Width="1"
                 Fill="{TemplateBinding Background}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1"
                       StartPoint="0.5,0">
                    <GradientStop Color="Black"
                  Offset="0" />
                    <GradientStop Color="White"
                  Offset="1" />
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GridViewColumnHeader}" x:Key="GVCH">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>

        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="Width" Value="Auto"/>

        <Setter Property="OverridesDefaultStyle" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">

                    <Grid>
                        <Border BorderThickness="1,0,1,3" BorderBrush="{DynamicResource SCB_Text}" Background="Transparent" Margin="0">
                            <TextBlock x:Name="ContentHeader" Text="{TemplateBinding Content}" Padding="5,2,5,2" Width="{TemplateBinding Width}" TextAlignment="Center" />
                        </Border>

                        <!-- The gripper / header resizer -->
                        <Thumb x:Name="PART_HeaderGripper"
                              HorizontalAlignment="Right"
                              Margin="0,0,-9,0"
                              Style="{StaticResource GridViewColumnHeaderGripper}" />
                    </Grid>


                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>

    <Style TargetType="ListView">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>

        <Setter Property="Foreground" Value="Transparent"/>

        <!-- trying to deactivate focus rectangle arround the entire listview
           which appears on mouse over and selection, no effect, giving up for now. -->
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ItemsControl.FocusVisualStyle" Value="{x:Null}"/>

        <Style.Triggers>
            <Trigger Property="IsMouseDirectlyOver" Value="True">
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>

        </Style.Triggers>
    </Style>

    <Style TargetType="ListViewItem" x:Key="ItemContainerStyle">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border CornerRadius="2" SnapsToDevicePixels="True"  
                               BorderThickness="{TemplateBinding BorderThickness}"   
                               BorderBrush="{TemplateBinding BorderBrush}"   
                               Background="{TemplateBinding Background}">

                        <Border Name="InnerBorder" CornerRadius="1" BorderThickness="1">
                            <Grid>

                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="11" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>

                                <GridViewRowPresenter Grid.RowSpan="2"   
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  
                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                            </Grid>
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Selection}" />
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Selection}" />
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="BorderBrush" Value="Transparent" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <!--#endregion-->


    <Style TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text_Header}"/>
    </Style>

    
    <Style TargetType="MenuItem">
        <Setter Property="Margin" Value="0 0 4 2"/>

        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text_Header}"/>
        <Setter Property="BorderThickness" Value="2 1 1 2"/>
        <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text_Header}"/>
        
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="StaysOpenOnClick" Value="True"/>

        <Setter Property="Padding" Value="20 2"/>
    </Style>


    <!-- Style for header/footer rows. -->
    <Style x:Key="HeaderRowStyle" TargetType="{x:Type TableRowGroup}">
        <Setter Property="FontWeight" Value="DemiBold"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="FontFamily" Value="Verdana"/>
    </Style>

    <!-- Style for data rows. -->
    <Style x:Key="DataRowStyle" TargetType="{x:Type TableRowGroup}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="Verdana"/>
    </Style>

    <!--#region Paragraph styles -->
    <Style TargetType="Paragraph" x:Key="HeaderParagraph">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="Bold"/>

    </Style>


    <Style TargetType="Paragraph" x:Key="TextParagraph">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Setter Property="FontSize" Value="12"/>

    </Style>
    <!--#endregion-->

    <Style x:Key="RadioButtonStyle" TargetType="RadioButton">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Margin" Value="0 5"/>
        <Setter Property="Width" Value="Auto"/>
    </Style>


    <!-- TabControl styles -->
    <!--#region TabControl styles -->
    <Style TargetType="TabControl">
        <Setter Property="Background"  Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="MinWidth" Value="400"/>
    </Style>

    <Style TargetType="TabItem">
        <Setter Property="Background"  Value="{DynamicResource SCB_ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_ButtonBackground}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border Name="PanelBorder"
                            Margin="0 0 3 0">
                        <Grid Name="Panel">
                            <ContentPresenter x:Name="ContentSite"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        ContentSource="Header"                                         
                                        Margin="10 5"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Panel"
                                    Value="{DynamicResource SCB_Text}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SCB_ButtonBackground}" />
                            <Setter Property="FontWeight" Value="Bold"/>

                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Background" Value="{DynamicResource SCB_ButtonBackground}" 
                                    TargetName="Panel"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"
                                    TargetName="PanelBorder"/>
                            <Setter Property="BorderThickness" Value="1"
                                    TargetName="PanelBorder"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SCB_Text}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}" 
                                    TargetName="Panel"/>
                            <Setter Property="Foreground"
                                    Value="{DynamicResource SCB_ButtonBackground}" />

                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->


    <!-- TextBlock styles -->
    <!--#region TextBlock styles -->
    <Style x:Key="Header" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text_Header}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource HFS}"/>
    </Style>

    <Style x:Key="DoubleValueTextBlock" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
    </Style>

    <Style x:Key="StringValueTextBlock" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
    </Style>
    <!--#endregion-->


    <!-- TextBox styles -->
    <!--#region TextBox styles -->
    <Style x:Key="DoubleValueTextBox" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StringValueTextBox" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->

</ResourceDictionary>