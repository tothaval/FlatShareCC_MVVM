<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:c_views="clr-namespace:SharedLivingCostCalculator.Components"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">
    
    <SolidColorBrush x:Key="SCB_Background" Color="White"/>
    <SolidColorBrush x:Key="SCB_Text" Color="#444"/>
    <SolidColorBrush x:Key="SCB_Text_Header" Color="DimGray"/>
    <SolidColorBrush x:Key="SCB_Selection" Color="#AEF"/>


    <CornerRadius x:Key="VisibilityField_CornerRadius">5</CornerRadius>
    <CornerRadius x:Key="Button_CornerRadius">15</CornerRadius>

    <FontFamily x:Key="FF">Verdana</FontFamily>
    <sys:Double x:Key="FS">11</sys:Double>
    <sys:Double x:Key="HFS">14</sys:Double>

    <Style x:Key="RadioButtonStyle" TargetType="RadioButton">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Margin" Value="0 5"/>
        <Setter Property="Width" Value="Auto"/>
    </Style>

    <Style x:Key="OptionCheckBox" TargetType="CheckBox">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Margin" Value="0 5"/>
        <Setter Property="Width" Value="Auto"/>
    </Style>

    <Style x:Key="MenuCheckBox" TargetType="CheckBox">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ContentPresenter Grid.Column="1" 
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    Margin="{TemplateBinding Padding}" 
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                    RecognizesAccessKey="True"/>

                    <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter Property="Background" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/> 
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Background}"/>
                        </Trigger>
                        
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>


    </Style>

    <Style x:Key="Header" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text_Header}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource HFS}"/>
    </Style>

    <Style TargetType="{x:Type GridViewColumnHeader}" x:Key="GVCH">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>        
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text_Header}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="Width" Value="Auto"/>

    </Style>

    <Style TargetType="ListView">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>


        <Setter Property="Foreground" Value="Transparent"/>
    </Style>
    
    
    <Style TargetType="ListViewItem" x:Key="ItemContainerStyle">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>

        <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Border CornerRadius="2" SnapsToDevicePixels="True"  
                                BorderThickness="{TemplateBinding BorderThickness}"   
                                BorderBrush="{TemplateBinding BorderBrush}"   
                                Background="{TemplateBinding Background}">
                                <Border Name="InnerBorder" CornerRadius="1" BorderThickness="1">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition MaxHeight="11" />
                                            <RowDefinition />
                                        </Grid.RowDefinitions>

                                        <!--<Rectangle Name="UpperHighlight" Visibility="Collapsed"
                                                   Fill="#75FFFFFF" />-->
                                        
                                        <GridViewRowPresenter Grid.RowSpan="2"   
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </Grid>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Selection}" />
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                            <!--<Setter Property="BorderBrush" Value="#FFCCF0FF" />-->
                                    <!--<Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />-->
                                </Trigger>
                                
                                <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Selection}" />
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                                <Setter Property="BorderBrush" Value="Transparent" />
                                <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="#80FFFFFF" />-->
                                <!--<Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />-->
                                <!--<Setter TargetName="UpperHighlight" Property="Fill" Value="#40FFFFFF" />-->
                            </Trigger>
                                <!--<MultiTrigger> 
                <MultiTrigger.Conditions> 
                    <Condition Property="IsSelected" Value="True" /> 
                    <Condition Property="Selector.IsSelectionActive" Value="False" /> 
                </MultiTrigger.Conditions> 
                <Setter Property="Background" Value="{StaticResource ListItemSelectedInactiveFill}" /> 
                <Setter Property="BorderBrush" Value="#FFCFCFCF" /> 
            </MultiTrigger>-->
                                <!--<MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="True" />
                                    <Condition Property="IsMouseOver" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" Value="{StaticResource ListItemSelectedHoverFill}" />
                                <Setter Property="BorderBrush" Value="#FF98DDFB" />
                            </MultiTrigger>-->
                                
                                
                                <!--<Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                </Trigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
    </Style>
      
    
    <Style x:Key="DoubleValueTextBlock" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
    </Style>

    <Style x:Key="StringValueTextBlock" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
    </Style>
        
    <Style TargetType="Grid">
        <Setter Property="Background" Value="Transparent"/>     
    </Style>

    <Style TargetType="c_views:CurrencyInputView">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="c_views:DoubleInputView">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>
    
    <Style TargetType="c_views:ObjectInputView">
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style TargetType="TabControl">
        <Setter Property="Background"  Value="Transparent"/>
    </Style>

    <Style TargetType="TabItem">
        <Setter Property="Background"  Value="Transparent"/>
    </Style>

    <!--<Style TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Padding" Value="5 2"/>
        <Setter Property="Margin" Value="2 2"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
    </Style>-->
    <Style x:Key="DoubleValueTextBox" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
            </Trigger>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="StringValueTextBox" TargetType="TextBox">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Padding" Value="10 5"/>
        <Setter Property="Width" Value="Auto"/>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="buttonStyle">

        <Setter Property="Background" Value="{DynamicResource SCB_Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                                BorderThickness="2"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                CornerRadius="{DynamicResource Button_CornerRadius}"
                                Padding="5">
                        <Grid Background="Transparent">
                            <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                                                  Margin="0"
                                                  VerticalAlignment="Center"
                                                  HorizontalAlignment="Left"
                                                  />
                        </Grid>
                    </Border>


                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Text}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Border" x:Key="VisibilityFieldBorder">
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="CornerRadius" Value="{DynamicResource VisibilityField_CornerRadius}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Margin" Value="0 5 0 0"/>
    </Style>
    
    
    <Style TargetType="ToggleButton" x:Key="toggleButtonStyle">

        <Setter Property="Background" Value="{DynamicResource SCB_Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text_Header}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="FontFamily" Value="{DynamicResource FF}"/>
        <Setter Property="FontSize" Value="{DynamicResource FS}"/>
        <Setter Property="Foreground" Value="{DynamicResource SCB_Text_Header}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="SnapsToDevicePixels" Value="True" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            CornerRadius="{DynamicResource Button_CornerRadius}"
                            Padding="20 2">
                        <Grid Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            
                            <ContentPresenter Content="{Binding Path=Content, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ToggleButton}}}"                                              
                                              Margin="0"
                                              VerticalAlignment="Center"
                                              HorizontalAlignment="Left"
                                              Grid.Column="1"/>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text_Header}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text_Header}"/>
                            <Setter Property="BorderThickness" Value="6"/>
                            <Setter Property="FontStyle" Value="Italic"/>
                            <Setter Property="FontStretch" Value="Expanded"/>
                            <Setter Property="FontWeight" Value="Bold"/>
                        </Trigger>
                        
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource SCB_Text_Header}"/>
                            <Setter Property="Foreground" Value="{DynamicResource SCB_Background}"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource SCB_Text_Header}"/>
                            
                            <Setter Property="FontStyle" Value="Normal"/>
                            <Setter Property="FontStretch" Value="Condensed"/>
                            <Setter Property="FontWeight" Value="Normal"/>
                            
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>